akka {
  loglevel = INFO
  stdout-loglevel = INFO
  loggers = ["akka.event.Logging$DefaultLogger"]

  extensions = [ "akka.cluster.metrics.ClusterMetricsExtension", "akka.persistence.Persistence" ]

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"

    warn-about-java-serializer-usage = false

    # Protobuf serializer for remote cluster metrics messages.
    serializers {
      akka-cluster-metrics = "akka.cluster.metrics.protobuf.MessageSerializer"
    }
    # Interface binding for remote cluster metrics messages.
    serialization-bindings {
      "akka.cluster.metrics.ClusterMetricsMessage" = akka-cluster-metrics
    }
    # Globally unique metrics extension serializer identifier.
    serialization-identifiers {
      "akka.cluster.metrics.protobuf.MessageSerializer" = 10
    }
    #  Provide routing of messages based on cluster metrics.
    router.type-mapping {
      cluster-metrics-adaptive-pool  = "akka.cluster.metrics.AdaptiveLoadBalancingPool"
      cluster-metrics-adaptive-group = "akka.cluster.metrics.AdaptiveLoadBalancingGroup"
    }
  }

  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      port = 2551
    }
  }

  cluster {
    downing-provider-class = "com.github.roberveral.dockerakka.cluster.CustomDowning"
    auto-down-unreachable-after = 5s
    role {
      master.min-nr-of-members = 1
      worker.min-nr-of-members = 1
    }
    sharding {
      remember-entities = on
    }
  }

  persistence {
    journal {
      plugin = "cassandra-journal"
      auto-start-journals = ["cassandra-journal"]
    }
    snapshot-store {
      plugin =  "cassandra-snapshot-store"
      auto-start-snapshot-stores = [ "cassandra-snapshot-store"]
    }
  }
}

consul {
  host       = "127.0.0.1"
  port       = 8500
}

http {
  host = "0.0.0.0"
  port = 5000
}
