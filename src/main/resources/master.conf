akka {
  loglevel = INFO
  stdout-loglevel = INFO
  loggers = ["akka.event.Logging$DefaultLogger"]

  extensions = [ "akka.cluster.metrics.ClusterMetricsExtension" ]

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"

    warn-about-java-serializer-usage = false

    # Protobuf serializer for remote cluster metrics messages.
    serializers {
      akka-cluster-metrics = "akka.cluster.metrics.protobuf.MessageSerializer"
    }
    # Interface binding for remote cluster metrics messages.
    serialization-bindings {
      "akka.cluster.metrics.ClusterMetricsMessage" = akka-cluster-metrics
    }
    # Globally unique metrics extension serializer identifier.
    serialization-identifiers {
      "akka.cluster.metrics.protobuf.MessageSerializer" = 10
    }
    #  Provide routing of messages based on cluster metrics.
    router.type-mapping {
      cluster-metrics-adaptive-pool  = "akka.cluster.metrics.AdaptiveLoadBalancingPool"
      cluster-metrics-adaptive-group = "akka.cluster.metrics.AdaptiveLoadBalancingGroup"
    }
  }

  remote {
    enabled-transports = ["akka.remote.netty.tcp"]
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "127.0.0.1"
      hostname = ${?HOST}
      port = ${PORT}
    }
  }

  cluster {
    seed-nodes = [
    "akka.tcp://dockerakka@127.0.0.1:2551"
    ]
    roles = ["master"]
    role {
      seed.min-nr-of-members = 1
      master.min-nr-of-members = 1
      worker.min-nr-of-members = 1
    }
  }
}

http {
  host = "0.0.0.0"
  host = ${?HOST}
  port = 5000
}
